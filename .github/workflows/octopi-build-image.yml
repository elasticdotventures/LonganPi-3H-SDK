# inspired by https://github.com/guysoft/OctoPi/blob/devel/.github/workflows/build.yml
name: octoprint-lpi3h-ci

on:
  workflow_dispatch:

env:
  ARCH: arm64
  BOARD: lpi3h  # Set this to your desired board name
  BUILD_ID: ${{ github.run_id }}  # This sets a unique build ID based on the GitHub run ID

jobs:
  prepare:
    runs-on: ubuntu-22.04
    env:
      CREATE_TARBALL: LonganPi-3H-SDK/build/rootfs.tar
      BOARD: ${{ env.BOARD }}
      BUILD_ID: ${{ env.BUILD_ID }}
    steps:

      - name: Download Longan Pi3H Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: lpi3h-ubuntu-${{ env.BOARD }}-${{ env.BUILD_ID }}  # Ensure this matches the name used in the upload step
          path: repository/src/image        

    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt install coreutils p7zip-full qemu-user-static

    - name: Checkout CustomPiOS
      uses: actions/checkout@v2
      with:
        repository: 'guysoft/CustomPiOS'
        path: CustomPiOS

    - name: Checkout Project Repository
      uses: actions/checkout@v2
      with:
        path: repository
        submodules: true

    - name: Download Longan Pi3H Image Artifact
      uses: actions/download-artifact@v2
      with:
        name: lpi3h-ubuntu-${{ env.BOARD }}-${{ env.BUILD_ID }} 
        path: repository/src/image
        
    - name: Update CustomPiOS Paths
      run: |
        cd repository/src
        ../../CustomPiOS/src/update-custompios-paths
    
    - name: Force apt mirror to work around intermittent mirror hiccups
      run: |
        echo "OCTOPI_APTMIRROR=http://mirror.us.leaseweb.net/raspbian/raspbian" > repository/src/config.local

    - name: Build Image
      run: |
        sudo modprobe loop
        cd repository/src
        sudo bash -x ./build_dist

    - name: Copy output
      id: copy
      run: |
        source repository/src/config
        NOW=$(date +"%Y-%m-%d-%H%M")
        IMAGE=$NOW-octopi-$DIST_VERSION

        cp repository/src/workspace/*.img $IMAGE.img

        echo "::set-output name=image::$IMAGE"

    # artifact upload will take care of zipping for us
    - uses: actions/upload-artifact@v1
      with:
        name: ${{ steps.copy.outputs.image }}
        path: ${{ steps.copy.outputs.image }}.img

