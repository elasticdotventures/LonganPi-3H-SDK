# inspired by https://github.com/guysoft/OctoPi/blob/devel/.github/workflows/build.yml
name: octoprint-lpi3h-ci

on:
  workflow_dispatch:
    inputs:
      ubuntu_ready:
        description: 'true a new ubuntu image ready'
        default: false
        required: true
        type: boolean
    # This trigger only receives events when the workflow file is on the default branch.
    # https://github.com/actions/github-script/issues/128
  workflow_call:
    inputs:
      ubuntu_ready:
        description: 'true a new ubuntu image ready'
        default: false
        required: true
        type: boolean

env:
  ARCH: arm64
  BOARD: lpi3h  # Set this to your desired board name
  BUILD_ID: ${{ github.run_id }}  # This sets a unique build ID based on the GitHub run ID

jobs:
  prepare:
    runs-on: ubuntu-22.04
    env:
      CREATE_TARBALL: LonganPi-3H-SDK/build/rootfs.tar
    steps:

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install coreutils p7zip-full qemu-user-static

      - name: Checkout CustomPiOS
        uses: actions/checkout@v2
        with:
          repository: 'guysoft/CustomPiOS'
          path: CustomPiOS

      - name: Checkout Project Repository
        uses: actions/checkout@v2
        with:
          path: repository
          submodules: true

      - name: Download Longan Pi3H Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: lpi3h-${{ env.BOARD }}-${{ env.BUILD_ID }}-ubuntu
          path: repository/src/image

      - name: Update CustomPiOS Paths
        run: |
          cd repository/src
          ../../CustomPiOS/src/update-custompios-paths

      # - name: Force apt mirror to work around intermittent mirror hiccups
      #   run: |
      #     echo "OCTOPI_APTMIRROR=http://mirror.us.leaseweb.net/raspbian/raspbian" > repository/src/config.local

      - name: Build Image
        run: |
          sudo modprobe loop
          cd repository/src
          sudo bash -x ./build_dist

      - name: Copy output
        id: copy
        run: |
          source repository/src/config
          NOW=$(date +"%Y-%m-%d-%H%M")
          IMAGE=$NOW-octopi-$DIST_VERSION

          cp repository/src/workspace/*.img $IMAGE.img

          echo "::set-output name=image::$IMAGE"

      # artifact upload will take care of zipping for us
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.copy.outputs.image }}
          path: ${{ steps.copy.outputs.image }}.img

